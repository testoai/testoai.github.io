[{"categories":["接口测试"],"content":"code200的文档说明 ","date":"2021-04-15","objectID":"/code200%E6%96%87%E6%A1%A3/:0:0","tags":["接口测试"],"title":"code200文档","uri":"/code200%E6%96%87%E6%A1%A3/"},{"categories":["接口测试"],"content":"配置文件 case1:'{ \"method\":\"POST\", \"header\":{ \"content-Type\":\"application/json\", \"Authorization\":\"Bearer d15a43e2-ade8-4566-95b6-b3f7e7821d63\" }, \"bodyType\":\"multipart/form-data\", \"body\":{ \"sourceSystem\": \"corex\", \"stAppno\": \"200000030139\", \"stGrpNo\": \"2\", \"rpFindings\": \" 肝： 形态、大小\", \"rpInspectCon\": \" 申请检查范围内未见明显异常\", \"osrContent\": \"\", \"rpKeyword\": \"\", \"rpChkUserId\": \"manager\", \"rpChkUsername\": \"管理员\", \"rpChkDt\": \"2020-07-01T18:42:40.000\", \"rpPositivePpt\": \"\", \"rpCriticalGrade\": \"\", \"tisID\": \"df319296aa714e4dafef813781f6b7a1\" }, \"files\":{ \"file\":\"C:/Users/rui/Pictures/Saved Pictures/test.png\", \"file1\":\"C:/Users/rui/Pictures/Saved Pictures/test.png\" }, response:{ \"data,token_type\u0026data,access_token\":\"case3,header,Authorization\", } }' method：参数值：GET、POST header：键值对 bodyType：参数值： urlParams：如果是URL上的参数写到body中的时候，bodyType需要写入该值 json：json形式的请求体 multipart/form-data：表单格式的请求体 body：键值对，支持嵌套 GET：url上的键值对可以写到body上，不能嵌套 POST：支持嵌套的json类型 表单格式：键值对的参数可以写到body上，如果有文件上传，写到下面的files files：键为文件的key，值为文件地址，可以写多个键值对，不能嵌套 response：将json返回值的参数取出，写入到其它case的参数中 一个参数对应一个参数，取data,token_type中的参数放到case3,header,Authorization中 response:{ \"data,token_type\":\"case3,header,Authorization\", } 多个参数对应一个参数，取data,token_type和data,access_token中的值拼接起来放到case3,header,Authorization中 response:{ \"data,token_type\u0026data,access_token\":\"case3,header,Authorization\", } ","date":"2021-04-15","objectID":"/code200%E6%96%87%E6%A1%A3/:1:0","tags":["接口测试"],"title":"code200文档","uri":"/code200%E6%96%87%E6%A1%A3/"},{"categories":null,"content":" 开篇啰嗦 这篇废话太多了，做完了新开一篇总结的 之前也写过接口测试工具，不过测试数据是放到Excel里面维护的 前段时间和两个测试大佬聊，他们好像不太看好把测试数据维护到Excel里面 所以现在重新做一个，把数据放到配置文件里面 思路和过程还有进度就展示在这里了 啥时候有雏形的时候就放到github上去 ","date":"2021-04-11","objectID":"/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:0:0","tags":["接口测试"],"title":"接口测试工具`code200`","uri":"/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"2021.04.10 23:38 周五开始做的，目前先把配置文件的思路讲一下 ","date":"2021-04-11","objectID":"/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:1:0","tags":["接口测试"],"title":"接口测试工具`code200`","uri":"/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"配置文件 接口地址放到一个yaml文件中，每个接口的case放到一个yaml文件中 URL存放的配置文件 conn.yaml url:- url:http://127.0.0.1/corexapi/oauth/tokencase:case1,case2- url:http://127.0.0.1/corexapi/external/pacs/cancelRegistercase:case3,case4 url：要测试的接口地址 case：每个URL要执行的case，可以是多个值，对应下面的case.yaml的第一个key case存放的配置文件 case.yaml case1:method:GETheader:Content-Type:application/jsonbodyType:paramsbody:test:1token:respParame:data,access_token:case2,header,tokencase2:method:POSTheader:jsonContent-Type:application/jsontoken:bodyType:body:test:respParame: method：请求方式 header：请求头，下面是请求头的内容，成对写入 bodyType：body类型 body：body内容 respParame：目的是把返回值中想要的参数拼接到其它case上 data,access_token：为返回参数的key，要支持嵌套结构，比如下面的例子，token在data一层里面的时候，也可以获取到 case2,header,token：取到想要的参数后，把该参数拼接到的地方 { \"success\":true, \"code\":200, \"msg\":\"请求成功\", \"data\":{ \"access_token\":\"96c0549c-f56c-4991-b351-8dad3adb40c2\", \"token_type\":\"bearer\", \"refresh_token\":\"de2ee487-6036-4770-a0a0-898086199157\", \"expires_in\":86399, \"scope\":\"read write\" } } ","date":"2021-04-11","objectID":"/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:1:1","tags":["接口测试"],"title":"接口测试工具`code200`","uri":"/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"工作流程 先读取conn.yaml，然后去遍历对应的case，拿到请求后调用请求方法，把请求对象传进去，然后再对返回值做处理 ","date":"2021-04-11","objectID":"/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:1:2","tags":["接口测试"],"title":"接口测试工具`code200`","uri":"/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"2021.04.12 20:22 ","date":"2021-04-11","objectID":"/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:2:0","tags":["接口测试"],"title":"接口测试工具`code200`","uri":"/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":null,"content":"今日工作汇报 领导把我薅到济南分部来了，今天跟领导沟通了挺多关于服务端质量保障体系相关的东西 在这边儿倒是停清闲，不过宾馆桌子太小了，还没插座😭，明天在公司多呆会儿 嘿嘿，可以没有鼠标，但是不能没有键盘 废话不说了，汇报工作正式开始 修改yaml配置文件 1.我把case的val改成了json形式的，yaml不好解析，改完就是下面这样 case1:'{ \"method\":\"POST\", \"header\":{ \"content-Type\":\"application/json\" }, \"bodyType\":\"form-data\", \"body\":{ \"sourceSystem\": \"corex\", \"stAppno\": \"0xx83hd8j3972\", \"stGrpNo\": \"2\", \"rpFindings\": \"测试所见\", \"rpInspectCon\": \"测试结论\", \"osrContent\": \"\", \"rpKeyword\": \"\", \"rpChkUserId\": \"manager\", \"rpChkUsername\": \"管理员\", \"rpChkDt\": \"2021-01-01T18:42:40.000\", \"rpPositivePpt\": \"\", \"rpCriticalGrade\": \"\", \"tisID\": \"df3192o4icu14e4daf9jf83781f6b7a1\" }, \"files\":{ \"file\":\"test.png\", \"filePath\":\"../files/test.png\" } }' 配置文件读取相关代码 2.今天把读取配置文件的写完了，贴个图吧，写的太烂，面向struct编程理解的太浅（看图得新建个标签页😂，这个模板图片放大不了） ","date":"2021-04-11","objectID":"/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/:2:1","tags":["接口测试"],"title":"接口测试工具`code200`","uri":"/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"},{"categories":["linux"],"content":"开篇啰嗦 啥时候更新时间间隔超过三个月我就把持续更新去掉 话说作为一个测试，第一篇文章是不是应该得是测试相关的 唉，在公司学的最多的就是linux 先写这个吧，明天再写一篇测试相关的 下面都是我目前能想到或工作中常用的 ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:0:0","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"文件操作相关 ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:1:0","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"文件拷贝 cp 拷贝文件：cp 要拷贝的文件 目标路径 拷贝文件redis.conf到/etc/目录下 [root@rui redis-6.2.0]# cp redis.conf /etc/ [root@rui redis-6.2.0]# ls /etc/redis.conf /etc/redis.conf 拷贝文件夹：cp -r 要拷贝的文件夹 目标路径 拷贝文件夹redis-6.2.0到/usr/local/目录下 [root@rui home]# cp -r redis-6.2.0/ /usr/local/ [root@rui home]# ls /usr/local/ bin games lib libexec redis-6.2.0 share etc include lib64 proc sbin src ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:1:1","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"文件移动 mv 移动文件夹/文件：mv 要移动的文件夹或者是文件 目标路径 移动文件redis.conf到src目录下 [root@rui redis-6.2.0]# mv redis.conf src/ [root@rui redis-6.2.0]# ls src/redis.conf src/redis.conf ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:1:2","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"文件查找 方式一：find 要查找的路径 -name 要查找的文件 find会遍历指定路径下的所有文件，然后返回符合条件的，支持模糊查询 [root@rui redis-6.2.0]# find ./ -name redis.c* ./src/redis.conf 方式二：locate 要查找的文件 locate 在/var/lib/mlocate/目录下存放着一个数据库文件，其实使用locate查询是查询的数据库，所以locate非常快 locate会返回所有包含文件名的文件 [root@rui redis-6.2.0]# locate /home/redis-6.2.0/src/red /home/redis-6.2.0/src/redis-benchmark /home/redis-6.2.0/src/redis-benchmark.c /home/redis-6.2.0/src/redis-benchmark.d /home/redis-6.2.0/src/redis-benchmark.o /home/redis-6.2.0/src/redis-check-aof /home/redis-6.2.0/src/redis-check-aof.c /home/redis-6.2.0/src/redis-check-aof.d /home/redis-6.2.0/src/redis-check-aof.o /home/redis-6.2.0/src/redis-check-rdb /home/redis-6.2.0/src/redis-check-rdb.c /home/redis-6.2.0/src/redis-check-rdb.d /home/redis-6.2.0/src/redis-check-rdb.o /home/redis-6.2.0/src/redis-cli /home/redis-6.2.0/src/redis-cli.c /home/redis-6.2.0/src/redis-cli.d /home/redis-6.2.0/src/redis-cli.o /home/redis-6.2.0/src/redis-sentinel /home/redis-6.2.0/src/redis-server /home/redis-6.2.0/src/redis-trib.rb /home/redis-6.2.0/src/redis.conf /home/redis-6.2.0/src/redisassert.h /home/redis-6.2.0/src/redismodule.h 然后新建一个文件，再查询一次 [root@rui redis-6.2.0]# \u003e /home/redis-6.2.0/src/testfile [root@rui redis-6.2.0]# locate /home/redis-6.2.0/src/testf [root@rui redis-6.2.0]# ll /home/redis-6.2.0/src/testfile -rw-r--r--. 1 root root 0 Apr 10 22:37 /home/redis-6.2.0/src/testfile 可以看到，没有查到，因为locate的数据库不是实时更新的，可以使用updatedb手动更新，也可以把更新命令配置到系统的任务计划表，定时执行 [root@rui redis-6.2.0]# updatedb [root@rui redis-6.2.0]# locate /home/redis-6.2.0/src/testf /home/redis-6.2.0/src/testfile 可以看到更新之后就查到了 ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:1:3","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"vim相关 ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:2:0","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"进入编辑模式 按i进入编辑模式后光标会在当前位置 按I进入编辑模式后光标会在当前行行首 按a进入编辑模式后，光标在当前字符后 按A进入编辑模式后，光标会在当前行行尾 按o进入编辑模式后，会在当前行下一行新开一行 按O进入编辑模式后，会在当前行上一行新开一行 我用的最多的是i ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:2:1","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"退出编辑模式 按ESC退出编辑模式 ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:2:2","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"查找 使用：/要查找的内容 使用vim /文件名打开文件后，输入/要查找的内容即可，比如下面我要在redis.conf配置文件中查找bind关键字 然后可以输入回车，会查找到该文件中第一个bind，可以输入n定位到下一个，输入N定位到上一个 取消高亮可以输入nohlsearch，简写为noh，也可以输入set nohlsearch ，简写为set noh ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:2:3","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"替换 把文件中的所有127.0.0.1替换为120.5.5.153 使用：:%s/127.0.0.1/120.5.5.153/g 把当前行的127.0.0.1替换为120.5.5.153 使用：:S/127.0.0.1/120.5.5.153/g 还有很多替换相关的命令，这里只是写了常用的 ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:2:4","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"退出 退出不保存:q 强制退出不保存:q! 保存并退出:wq 强制保存并退出:wq! ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:2:5","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"日志查看 ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:3:0","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"实时刷新查看日志 方式一：使用：tail -f -n 10 日志文件名称 -f：实时刷新 -n：行数关键字，后面跟行数，表示从后10行开始查看 方式二：使用：tailf 日志文件名称 默认从后十行开始查看 ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:3:1","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"查看日志前10行 使用：head -n 行数 日志文件名称 -n ：行数关键字 ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:3:2","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":["linux"],"content":"查看第10行到第20行 方式一：使用：sed -n '10,20p' 日志文件名称 -n：打印制定行 '10,20p'：指定的行号 方式二：使用：cat -n 日志文件名称 | head -n 20 | tail -n +10 cat -n：打印日志显示行号 head -n 20：打印到20行 tail -n +10：从第10行开始打印 ","date":"2021-04-10","objectID":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/:3:3","tags":["linux"],"title":"linux(Centos7)相关命令 持续更新...","uri":"/linuxcentos7%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"},{"categories":null,"content":"第一篇文章 写点儿啥呢 这两天一直在弄博客，昨天弄了一天icon， hugo的文档有点儿多，没找到config.toml的说明文档 [手动笑哭] 最后各种Google，昨晚终于弄好了 其实昨天一直边玩儿边搞，在家弄效率是不太高 ^_^ 但是这个为啥不兼容markdown的表情 ToT 今天是清明节，本来打算回家…，改到五一假期再回吧 祝自个儿下周二顺利吧 开始学习… ","date":"2021-04-04","objectID":"/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/:0:0","tags":null,"title":"第一篇文章","uri":"/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"}]